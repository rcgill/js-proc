
#|
  Multi-line, multi-chunk pragmas:

  //mu(<...>)    --markup follows; () gives schema
  //mu(docbook)  --docbook follows
  //mu(md)       --markdown follows
  //mu(markdown) --markdown follows
  ///            --end any previous pragma; return to markdown

  Single-line pragmas:

  //#          --pragma for eval preprocessing
  //namespace  --object that serves as a namespace
  //const      --object that servse as a constant
  //enum       --object than serves as an enumeration
  //type       --the documented item is a type

  Multi-line, multi-chunk, or single-line pragmas:

  //n      --note section
  //note   --saa
  //warn   --warn section
  //w      --saa
  //return --a return section
  //r      --returns (either a return section or a single item in a return section)
  //throws --throws
  //t      --throws (either a throws section of a single item in a throw section)
  //c      --condition in a return/throw section or code otherwise
  //code   --code
  //todo   --to do note
  //todoc  --to document note
  //in     --implementation note
  //inote  --saa


//sa
//diagram
//doc, docs
//ex, example, examples
//tag, tags,

|#

lexical tokens:
:num    (value of the number)
:punc   []{}(),.;:
:string (value of the string)
:comment (value of single-line comment, including // and new-line)
:regexp (value of regular expression)
:operators any of (notice that these aren't legal, the "|" are presented unescapted) 
           :in :instanceof :typeof :new :void :delete :++ :-- :+ :- :! :~ :& :| :^ :* :/ :%
                  :>> :<< :>>> :< :> :<= :>= :== :=== :!= :!== :? := :+= :-= :/= :*= :%= :>>= :<<=
                  :>>>= :~= :%= :|= :^= :&& :||

:atom :false :null :true :undefined :nan
:name
:keyword :break :case :catch :continue :debugger :default :do :else 
                    :finally :for :function :if :return :switch
                    :throw :try :var :while :with

ast node types

toplevel --> <list of statements>
seq --> <expression> <expression>
assign --> <assignable-expression> <expression>
unary-prefix -->  <op> <expr>
atom | num | string | regexp | name --> value of token
dot 
block --> <list of statements> // an empty statement also returns a block.
case --> <expr>
debugger
default
switch --> <expr> <list of case|default, statements> list has even number of elements
do --> <condition> <statement>
return --> optional expression
throw --> <expr>
while --> <expr> <statement>
with --> <expr> <statement>
label --> <label> <statement> can't get this to work
break
continue --> [label]
for-in --> var name object statement
for --> init test step statement
defun | function --> name <list of  argnames> <list of statements>
if --> condition statement else
try --> statement catch-statement finally-statement
var --> <list of string or (string, value) >
new --> <expr> <list of arguments>
atom | number | string | regexp | name --> value
array --> <list of exprs>
object --> <list of name, exprs>
dot --> lhs rhs
sub --> lhs rhs
call --> lhs <list or arguments>
binary --> op lhs rhs
conditional --> expr yes-expr no-expr

toplevel
        statement
                simple-statement
                        expression (an expression; possibly several separated by commas)
                                maybe-assign (an expression that may be assignable; handles a= b= 123)
                                        maybe-conditional
                                                expr-ops
                                                        expr-atom
                                                                new*
                                                                subscripts
                                                                array*
                                                                object*
                                                                function*
                                                        expr-op


Errors:
PARSE-JS> (parse-js-string "a= undefined;")
(:TOPLEVEL ((:STAT (:ASSIGN T (:NAME "a") (:NAME "undefined")))))
/sb
(:TOPLEVEL ((:STAT (:ASSIGN T (:NAME "a") (:ATOM :UNDEFINED)))))

PARSE-JS> (parse-js-string "a= new new(123);")
(:TOPLEVEL ((:STAT (:ASSIGN T (:NAME "a") (:NEW (:NEW (:NUM 123) NIL) NIL)))))
/sb
illegal

PARSE-JS> (parse-js-string "a.= = 7;")
(:TOPLEVEL ((:STAT (:ASSIGN T (:DOT (:NAME "a") "=") (:NUM 7)))))
/sb
illegal; don't understand purpose of using (as-name) in "(subscripts (as :dot expr (as-name)) allow-calls))" in subscripts

PARSE-JS> (parse-js-string ";;a.b.c= 7;;")
(:TOPLEVEL
 ((:BLOCK) (:BLOCK)
  (:STAT (:ASSIGN T (:DOT (:DOT (:NAME "a") "b") "c") (:NUM 7))) (:BLOCK)))
/sb
why generate the (:BLOCK) nodes?

PARSE-JS> (parse-js-string "var a=1, b=2;")
(:TOPLEVEL ((:VAR (("a" :SEQ (:NUM 1) (:ASSIGN T (:NAME "b") (:NUM 2)))))))
/sb
(:TOPLEVEL ((:VAR (("a" :NUM 1) ("b" :NUM 2)))))


DELTAS:

renamed "expression-allowed" to "regex-allowed" in tokenize.lisp




(defun find-defines-and-references (resource defines)
  (let ((references (resource-references resource))
        (lex-stack nil))
    (labels (
             (lexical-var-p (name)
               (dolist (frame lex-stack)
                 (if (gethash name frame)
                     (return-from lexical-var-p t)))
               nil)

             (traverse-var-defs (defs)
               ;defs is a list of lexical-var (name, init-val(expr), comment)
               ;name is a token, expr is an expression or nil
               (dolist (def defs)
                 (let ((name (token-value (lexical-var-name def))))
                   (if (not lex-stack)
                     ;top-level variable being defined...
                     (setf (gethash name defines) resource)
                     ;defining lexical vars in the current scope
                     (setf (gethash name (car lex-stack)) t))
                   (traverse (lexical-var-init-val def)))))

             (traverse (ast)
               (if (not ast)
                   (return-from traverse))
               (case (asn-type ast)
                 ((:root :block) 
                  ;children --> list of statements
                  (dolist (statement (asn-children ast))
                    (traverse statement)))

                 (:label
                  ;children --> (label . statement)
                  (traverse (second (asn-children ast))))
                 
                 (:switch
                  ;children --> (switch-expr  . case-list)
                  (let ((children (asn-children ast)))
                    (traverse (car children))
                    (dolist (case-item (cdr children))
                      (traverse case-item))))

                 (:case
                  ;children --> expression
                  (traverse (asn-children ast)))

                 (:do
                  ;children --> (condition . statment)
                  (let ((children (asn-children ast)))
                    (traverse (car children))
                    (traverse (cdr children))))

                 (:return
                  ;children --> expression
                   (traverse (asn-children ast)))

                 (:throw
                  ;children --> throw-expr
                  (traverse (asn-children ast)))

                 (:var
                  ;children --> vardefs
                  ;vardefs is a list of lexical-var (name, init-val(expr), comment)
                  ;name is a token, expr is an expression or nil
                  (traverse-var-defs (asn-children ast)))

                 (:while
                  ;children --> (while-condition . while-statement)
                  (let ((children (asn-children ast)))
                    (traverse (car children))
                    (traverse (cdr children))))

                 (:with
                  ;children --> (with-expr . with-statement)
                  (format t "WARNING: used with, dependency tree may be wrong"))

                 (:statement
                  ;children --> expression
                  (traverse (asn-children ast)))

                 (:for-in
                  ;children --> (list var name object statement)
                  (let ((children (asn-children ast)))
                    (traverse (third children))
                    (traverse (fourth children))))

                 (:for
                  ;children --> (list var init test step statement)
                  ;var --> var keyword or nil
                  ;init --> (nil | vardefs (see :var, above) | asn (an expression))
                  ;test, step --> (nil | asn (an expression)
                  (let ((children (asn-children ast)))
                    (if (first children)
                        (traverse-var-defs (second children))
                        (traverse (second children)))
                    (traverse (third children))
                    (traverse (fourth children))
                    (traverse (fifth children))))

                 ((:function-def :function-literal)
                  ;children --> (list name parameter-list body)
                  ;parameter-list --> (list of (name . comment))
                  ;body --> is a list of statements
                  (let ((lex-vars (car (push (make-hash-table :test 'equal) lex-stack))))
                    (dolist (p (second (asn-children ast)))
                      (setf (gethash (car p) lex-vars) t))
                    (dolist (statement (third (asn-children ast)))
                      (traverse statement))
                    (pop lex-stack)))

                 (:if
                  ;children --> (list condition then else)
                  (dolist (child (asn-children ast))
                    (traverse child)))

                 (:try
                  ;children --> (list body catch finally)
                  ; catch --> (name-token . statement)
                  (let ((children (asn-children ast)))
                    (traverse (first children))
                    (traverse (cdr (second children)))
                    (traverse (third children))))

                 (:expr-list
                  ;children --> list of expressions
                  (dolist (expr (asn-children ast))
                    (traverse expr)))

                 (:new
                  ;children --> (new-expr . args)
                  ;args an expr-list asn
                  (let ((children (asn-children ast)))
                    (traverse (car children))
                    (traverse (cdr children))))

                 ((:unary-prefix :unary-postfix)
                  ;children --> (cons (token-value op) expr)
                  (traverse (cdr (asn-children ast))))

                 (:array
                  ;children --> expr-list
                  (dolist (item (asn-children ast))
                    (traverse item)))

                 (:object
                  ;children --> list of (property-name . expression)
                  (dolist (prop (asn-children ast))
                    (traverse (cdr prop))))

                 ((:= :+= :-= :/= :*= :%= :>>= :<<= :>>>= :~= :%= :|\|=| :^=)
                  ;children --> (lhs . rhs)
                  (let* ((lhs (car (asn-children ast)))
                         (name-root (get-asn-name-root lhs))
                         (name (and name-root (get-ast-name lhs)))
                         (rhs (cdr (asn-children ast))))
                    (if (and name-root (not (lexical-var-p name-root)))
                        (setf (gethash name defines) resource))
                    (traverse rhs)))


                 (:call
                  ;children --> (function-expression . args)
                  ;args --> (expression list)
                  (let* ((children (asn-children ast))
                         (func-expr (car children))
                         (args (cdr children))
                         (root (get-asn-name-root func-expr))
                         (function-name (and root (get-ast-name func-expr))))
                    (traverse func-expr)
                    (dolist (arg args)
                      (traverse arg))
                    (if (and root (not (lexical-var-p root)))
                        (setf (gethash function-name references) t))
                    (cond
                      ((equal function-name "dojo.declare")
                       (if (eq (asn-type (first args)) :string)
                           (setf (gethash (token-value (asn-children (first args))) defines) resource))
                       )
                       
                      ((equal function-name "dojo.mixin")
                       (let ((root (get-asn-name-root (first args)))
                             (name (and root (get-ast-name (first args))))
                             (plist (and (eq (asn-type (second args)) :object) (asn-children (second args)))))
                         (if (and root (not (lexical-var-p root)))
                             (dolist (prop plist)
                               (setf (gethash (concatenate 'string name "." (get-ast-name (car prop))) defines) resource))))
                       )

                      )))
                 
                 ((:sub :comma :|\|\|| :&& :|\|| :^ :& :== :=== :!= :!== :< :> :<= :>= :instanceof :>> :<< :>>> :+ :- :* :/ :%)
                  (traverse (car (asn-children ast)))
                  (traverse (cdr (asn-children ast))))

                 (:dot
                  (let ((root (get-asn-name-root ast)))
                    (if (and root (not (lexical-var-p root)))
                        (setf (gethash (get-ast-name ast) references) t))))
                 
                 (:conditional
                  ;children --> (list condition true-expr false-expr)
                  (dolist (expr (asn-children ast))
                    (traverse expr)))

                 (t)
                 )))
      (traverse (resource-ast resource))
      (format t "Defines: ")
      (maphash (lambda (key value) (if (eq value resource) (remhash key references))) defines)
      (maphash (lambda (key value) (if (eq value resource) (format t "~A " key))) defines)
      (format t "~%References: ")
      (maphash (lambda (key value) (declare (ignore value)) (format t "~A " key)) references)
      (format t "~%")
)))
